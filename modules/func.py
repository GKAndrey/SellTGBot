from modules.settings import *
from modules.models import *
from modules.products import *

def start_bot(message):
    if message.text == 'üëã –ü–µ—Ä–µ–π—Ç–∏ –∫ –º–µ–Ω—é':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('–¢–æ–≤–∞—Ä—ã üõí')
            btn2 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìó')
            btn4 = types.KeyboardButton('–ü–æ–º–æ—â—å ‚ùì')
            cns = types.KeyboardButton('–ó–∞–∫—Ä—ã—Ç—å ‚ùå')
            if message.from_user.id in admin_list:
                btn3 = types.KeyboardButton('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å üéÆ')
                markup.add(btn1, btn2, btn3, btn4, cns)
            else:
                markup.add(btn1, btn2, btn4, cns)
            msg = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:', reply_markup=markup)
            bot.register_next_step_handler(msg, check_answ)

def check_answ(message):
    if message.text == '–¢–æ–≤–∞—Ä—ã üõí': #–ù–∞–¥ –ª–æ–≥–∏–∫–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –í–∞–Ω—è
        pass
    elif message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìó':
        pass
    elif message.text == '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å üéÆ':
        if message.from_user.id in admin_list:
            pass
    elif message.text == '–ü–æ–º–æ—â—å ‚ùì':
        msg = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å)', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, quests)
    elif message.text == '–ó–∞–∫—Ä—ã—Ç—å ‚ùå':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('/start')
        markup.add(btn1)
        bot.send_message(message.chat.id, "–ë—É–¥—É –∂–¥–∞—Ç—å –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏.", reply_markup=markup)
    else:
        bot.send_message(message.from_user.id, '–ü—Ä–æ—Å–∏–º –≤–∞—Å –∑–∞—Ä–∞–Ω–µ–µ, –Ω–µ —Å—Ç–æ–∏—Ç –ª–æ–º–∞—Ç—å –ª–æ–≥–∏–∫—É –±–æ—Ç–∞, –≤—Ä—è—Ç–ª–∏ —É –≤–∞—Å —ç—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è, –∫ —Ç–æ–º—É –∂–µ, —Ö—É–∂–µ –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ —Å–µ–±–µ, –µ—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–º–µ—Ç–∏—Ç –≤–∞—Å –∫–∞–∫ –≤–∏–Ω–æ–≤–Ω–∏–∫–∞ –∏ –¥–æ–±–∞–≤–∏—Ç –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞–º–µ—Ä—è–Ω–Ω–æ, —Ç–æ –±—É–¥—å—Ç–µ –æ–∫—É—Ä–∞—Ç–Ω–µ–µ.')
        msg = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:')
        bot.register_next_step_handler(msg, check_answ)

def quests(message):
    global question_list
    bot.send_message(message.chat.id,f"–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞. –í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {len(question_list)+1} –≤ –æ—á–µ—Ä–µ–¥–∏")
    question_list.append([message.chat.id, message.text, message.from_user.username])
    with open(f"{PATH}/questionlist.json", "w") as write_file:
        json.dump(question_list, write_file,sort_keys=False,indent=4,ensure_ascii=False,)
    for i in admin_list:
        bot.send_message(i,f"–£ –≤–∞—Å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å. –í—Å–µ–≥–æ {len(question_list)} –≤–æ–ø—Ä–æ—Å–æ–≤.")